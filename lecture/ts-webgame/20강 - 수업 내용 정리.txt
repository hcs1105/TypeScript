<2022.04.03>

1. 인터페이스는 다른 인터페이스를 상속받을 수 있습니다.

interface RSP {
  readonly scissors : '0', 
  readonly rock : '-147px', 
  readonly paper : '-294px' 
};

interface Example extends RSP {

}

2. 같은 인터페이스들을 따로 적어도 타입스크립트는 합쳐서 하나의 인터페이스로 인식합니다.

interface RSP {
  readonly scissors : '0' 
};

interface RSP { 
  readonly rock : '-147px', 
  readonly paper : '-294px' 
};

interface RSP { // 타입스크립트가 RSP 인터페이스를 인식하는 경우
  readonly scissors : '0', 
  readonly rock : '-147px', 
  readonly paper : '-294px' 
};

3. 2번의 특성으로 인해 남이 만튼 인터페이스에 영향을 주지 않고 해당 인터페이스를 확장할 수 있습니다.

interface RSP { // 남이 만든 인터페이스
  readonly scissors : '0', 
  readonly rock : '-147px', 
  readonly paper : '-294px'
};

interface RSP { // 내가 만든 인터페이스
  hello : 'a'
};

4. 인터페이스에 뭐가 들어올지 모를 경우, 다음과 같이 표현할 수 있습니다.

interface RSP { // 남이 만든 인터페이스
  [a : string] : string
};

5. 유니온이 하나라도 있는 경우에는 type의 사용을 추천합니다.

type RSP { // 남이 만든 인터페이스
  readonly scissors : '0', 
  readonly rock : '-147px', 
  readonly paper : '-294px'
} | string;

6. 중복을 제거하고 싶으면 keyof 속성을 사용하세요.

let imgCoords : [keyof RSP] = '0'; // "scissors" | "rock" | "paper"
let imgCoords : RSP[keyof RSP] = '0'; // "0" | "-147px" | "-294px"

interface RSP {
  readonly scissors : '0', 
  readonly rock : '-147px', 
  readonly paper : '-294px', 
};

7. 다른 사람이 어떤 속성의 타입을 지정했더라도 개발자의 입맛에 맞게 타입을 좁게 수정할 수 있습니다.

return (Object.keys(rsp) as ['scissors', 'rock', 'paper']).find((k) => rsp[k] === imgCoords)!;

const myChoice = this.id as keyof RSP;

8. 일반 함수의 경우, 첫 번째 매개 변수에 this를 쓰고 this의 타입까지 명시합니다.

btn.addEventListener('click', function(this : HTMLButtonElement, e : Event){

9. 매개 변수의 경우, 작은 집합은 큰 집합에 들어갈 수 있지만 큰 집합은 작은 집합에 들어갈 수 없습니다. 그래서 타입의 범위를 동일하게 맞추는 것이 좋습니다.

let imgCoords : RSP[keyof RSP] = '0'; // 같은 집합
function computerChoice(imgCoords : RSP[keyof RSP]) : keyof RSP { // 같은 집합
  return (Object.keys(rsp) as ['scissors', 'rock', 'paper']).find((k) => rsp[k] === imgCoords)!;
}

let imgCoords : RSP[keyof RSP] = '0'; // 작은 집합

function computerChoice(imgCoords : string) : keyof RSP { // 큰 집합, 참고로 string은 RSP[keyof RSP]보다 타입의 범위가 넓다.
  return (Object.keys(rsp) as ['scissors', 'rock', 'paper']).find((k) => rsp[k] === imgCoords)!;
}

10. 타입스크립트가 타입을 undefined하거나 null이라고 이야기하더라도 확신을 주기 위해 느낌표(!)를 붙입니다. 그런데 에러를 발생시킬 확률이 높으므로 조심해야 됩니다.

function computerChoice(imgCoords : RSP[keyof RSP]) : keyof RSP {
  return (Object.keys(rsp) as ['scissors', 'rock', 'paper']).find((k) => rsp[k] === imgCoords)!;
}

※ 느낌표(!)를 붙이기 싫으면 다음과 같이 표현합니다.

function computerChoice(imgCoords : RSP[keyof RSP]) : keyof RSP {
  const value = (Object.keys(rsp) as ['scissors', 'rock', 'paper']).find((k) => rsp[k] === imgCoords);
  if(!value) {
    throw new Error('error');
  }
  return value;
}